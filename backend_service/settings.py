"""
Django settings for backend_service project.

Generated by 'django-admin startproject' using Django 4.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
from datetime import timedelta
from pathlib import Path

import environ
import sentry_sdk
from sentry_sdk.integrations.celery import CeleryIntegration
from sentry_sdk.integrations.django import DjangoIntegration
from sentry_sdk.integrations.redis import RedisIntegration

# django-environ is a package that allows you to utilize 12factor inspired environment variables
# in your settings, securely store configuration variables and switch configurations easily.
# More about django-environ here: https://django-environ.readthedocs.io/en/latest/
ENV = environ.Env()

# Load all the environment variables
environ.Env.read_env()


def env_get(key, default=None):
    """
    Get the environment variable corresponding to the key, if not found, return the default value

    Parameters:
        key (str): The key of the environment variable
        default (str): The default value to return if the environment variable is not found

    Returns:
        str: The value of the environment variable corresponding to the key, if not found, return the default value
    """
    return os.environ.get(key, default)


# Get the environment setting (development, staging, production, etc.)
ENVIRONMENT = ENV.str("ENVIRONMENT", default="development")
# Use different color codes for different environments (just for visual differentiation)

ENVIRONMENT_COLOR = (
    "#FF0000"
    if ENVIRONMENT == "production"
    else "#F4C430"
    if ENVIRONMENT == "staging"
    else "#808080"
)

# BASE_DIR is a constant in Django that gets the root directory of the project
# Here it's one level up the directory where settings.py resides
BASE_DIR = Path(__file__).resolve().parent.parent

# Debug mode: development environment by default, can be changed by setting DEBUG environment variable
DEBUG = ENV.bool("DEBUG", default=True)

# Booleans indicating if it's a production or staging environment
IS_PROD = ENV.bool("IS_PRODUCTION", default=ENVIRONMENT == "production")
IS_STAGING = ENV.bool("IS_STAGING", default=ENVIRONMENT == "staging")

# A list of strings representing the host/domain names that this Django site can serve.
ALLOWED_HOSTS = ENV.list("ALLOWED_HOSTS", default=["localhost"])

# IP addresses that are considered 'safe' and can be trusted.
# It's used by IPAddressAuthentication class which is used for IP address based authentication.
WHITELISTED_IP_ADDRESSES = ENV.list("WHITELISTED_IP_ADDRESSES", default=[])
WHITELISTED_CIDR = ENV.list("WHITELISTED_CIDR", default=[])

# If True, the SecurityMiddleware redirects all non-HTTPS requests to HTTPS
# (except for those URLs matching a regular expression listed in SECURE_REDIRECT_EXEMPT).
SECURE_SSL_REDIRECT = ENV.bool("SECURE_SSL_REDIRECT", default=IS_PROD or IS_STAGING)

# If running in Production or Staging environments, set SECURE_PROXY_SSL_HEADER and initialize sentry_sdk
if IS_PROD or IS_STAGING:
    SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
    # Sentry is an open-source error tracking system that helps to monitor and fix crashes in real-time.
    # Learn more about Sentry here: https://sentry.io/welcome/
    sentry_sdk.init(
        dsn=ENV.str(
            "SENTRY_DSN", default=None
        ),  # Data Source Name for connecting Sentry
        integrations=[  # Integrations specify which parts of the system should be monitored
            DjangoIntegration(),
            CeleryIntegration(),
            RedisIntegration(),
        ],
        server_name=ENV.str(
            "SERVER_NAME", default=ENV("SERVER_NAME", default="server-not-set")
        ),
        release=ENV.str(
            "SOURCE_VERSION",
            default=ENV.str("RELEASE_VERSION", default="default-release"),
        ),
        # Name of the environment (used in Sentry dashboard to differentiate between environments)
        environment=ENVIRONMENT,
    )

# SECRET_KEY is a secret unique key for your particular Django installation.
# This is used to provide cryptographic signing, and should be set to a unique, unpredictable value.
# This key needs to be shared with any other microservices if they need to verify the signature of
# the JWT token generated by this service.
SECRET_KEY = ENV.str(
    "SECRET_KEY", default="^3!@kpi9pfi&lqmsh_7f_@(f*z#r!&35q836^uha3wa!$e!g@y"
)

# This section configures Redis URL and settings for Celery.
# Celery is a Distributed Task Queue, which can be used to offload long-running tasks and schedule tasks.
REDIS_URL = ENV.str("REDIS_URL", default=None)
CELERY_BROKER_URL = REDIS_URL
CELERY_RESULT_BACKEND = REDIS_URL
# Timeout for message visibility in the queue (helps to deal with crashed workers)
CELERY_BROKER_TRANSPORT_OPTIONS = {"visibility_timeout": 3600}  # 1 hour
CELERY_IMPORTS = ("engineering.tasks",)  # Where your tasks are located
# Worker will acknowledge the task after it has been executed
CELERY_TASKS_ACK_LATE = ENV.bool("CELERY_TASKS_ACK_LATE", default=False)

# PostgreSQL Database configurations
POSTGRES_USER = ENV.str("POSTGRES_USER", default="dev")
POSTGRES_PASSWORD = ENV.str("POSTGRES_PASSWORD", default="dev")
POSTGRES_DB = ENV.str("POSTGRES_DB", default="dev")
POSTGRES_HOST = ENV.str("POSTGRES_HOST", default="127.0.0.1")
POSTGRES_PORT = ENV.int("POSTGRES_PORT", default=5432)

# AWS Configuration
AWS_ACCESS_KEY = ENV("AWS_ACCESS_KEY", default=None)
AWS_SECRET_KEY = ENV("AWS_SECRET_KEY", default=None)
AWS_REGION = ENV("AWS_REGION", default="ap-south-1")
AWS_BUCKET_REGION = ENV("AWS_BUCKET_REGION", default="ap-south-1")
AWS_BUCKET = ENV("AWS_BUCKET", default="s2c-platform-staging")
AWS_BUCKET_PUBLIC = f"{AWS_BUCKET}-public"

# Email
EMAIL_FROM = ENV.str("EMAIL_FROM", default="no-reply@example.com")
# Django-SES configuration (https://github.com/django-ses/django-ses)
EMAIL_BACKEND = (
    "django_ses.SESBackend" if IS_PROD else "communications.services.email.EmailBackend"
)
AWS_ACCESS_KEY_ID = AWS_ACCESS_KEY
AWS_SECRET_ACCESS_KEY = AWS_SECRET_KEY
AWS_SES_REGION_NAME = ENV("AWS_SES_REGION_NAME", default=AWS_REGION)

# File Handling
FILE_STORAGE_PATH = ENV("FILE_STORAGE_PATH", default="/code/data")
DATA_UPLOAD_MAX_MEMORY_SIZE = ENV(
    "DATA_UPLOAD_MAX_MEMORY_SIZE", default=104857600
)  # 100 MB
DISABLE_ATTACHMENT_FILE_SIZE = ENV(
    "DISABLE_ATTACHMENT_FILE_SIZE", default=20971520
)  # 20 MB
# max limit on file size in bytes after which file must be compressed
ENFORCE_COMPRESSION_FILE_SIZE = ENV(
    "ENFORCE_COMPRESSION_FILE_SIZE", default=5242880
)  # 5 MB

# Application definition
REST_FRAMEWORK_APPS = [
    "rest_framework",  # Django REST Framework
    "rest_framework.authtoken",  # Django REST Framework Token Authentication
    "rest_framework_simplejwt.token_blacklist",  # Django REST Framework Simple JWT Token Blacklist
]

THIRD_PARTY_APPS = [
    'corsheaders',  # CORS Headers
    'drf_yasg',  # Swagger
    'phonenumber_field',  # Phone Number Field
    "django_extensions",  # Django Extensions
]

HEALTH_CHECK_APPS = [
    'health_check',  # Health Check Core
    'health_check.db',  # Health Check DB
    'health_check.cache',  # Health Check Cache
    'health_check.storage',  # Health Check Storage
    'health_check.contrib.migrations',  # Health Check Migrations
    'health_check.contrib.celery',  # Health Check Celery
    'health_check.contrib.celery_ping',  # Health Check Celery Ping
    'health_check.contrib.psutil',  # Health Checks Disk Space and Memory Usage, requires psutil
    'health_check.contrib.redis',  # Health Check Redis
]

PROJECT_APPS = [
    'backend_service',  # Backend Service
    'communications',  # Communications
    'engineering',  # Engineering
]

INSTALLED_APPS = [
    'backend_service.admin.AdminConfig',  # Admin Config (Custom Admin)
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
] + REST_FRAMEWORK_APPS + THIRD_PARTY_APPS + HEALTH_CHECK_APPS + PROJECT_APPS

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "crum.CurrentRequestUserMiddleware",
]

# Uncomment the following line if you want to use custom user model
# AUTH_USER_MODEL = 'path.to.User'

ROOT_URLCONF = "backend_service.urls"

DISK_USAGE_MAX = ENV.int("DISK_USAGE_MAX", default=80)
MEMORY_MIN = ENV.int("MEMORY_MIN", default=30)
HEALTH_CHECK = {
    "DISK_USAGE_MAX": DISK_USAGE_MAX,  # percent
    "MEMORY_MIN": MEMORY_MIN,  # in MB
}

if ENV.bool("FILE_LOGGING", default=False):
    LOG_PATH = ENV("LOG_PATH", default="/code/logs")
    if not os.path.exists(LOG_PATH):
        os.makedirs(LOG_PATH)

    LOGGING = {
        "version": 1,
        "disable_existing_loggers": False,
        "handlers": {
            "console": {
                "class": "logging.StreamHandler",
            },
            "debug_file": {
                "level": "DEBUG",
                "class": "logging.FileHandler",
                "filename": f"{LOG_PATH}/debug.log",
            },
            "info_file": {
                "level": "INFO",
                "class": "logging.FileHandler",
                "filename": f"{LOG_PATH}/info.log",
            },
            "warning_file": {
                "level": "WARNING",
                "class": "logging.FileHandler",
                "filename": f"{LOG_PATH}/warning.log",
            },
            "error_file": {
                "level": "ERROR",
                "class": "logging.FileHandler",
                "filename": f"{LOG_PATH}/error.log",
            },
            "critical_file": {
                "level": "CRITICAL",
                "class": "logging.FileHandler",
                "filename": f"{LOG_PATH}/critical.log",
            },
        },
        "loggers": {
            "default": {
                "handlers": [
                    "console",
                    "debug_file",
                    "info_file",
                    "warning_file",
                    "error_file",
                    "critical_file",
                ],
                "level": ENV("DJANGO_LOG_LEVEL", default="INFO"),
                "propagate": True,
            },
        },
    }
else:
    LOGGING = {
        "version": 1,
        "disable_existing_loggers": ENV.bool("DISABLE_EXISTING_LOGGERS", default=False),
        "handlers": {
            "console": {
                "class": "logging.StreamHandler",
            },
        },
        "loggers": {
            "default": {
                "handlers": [
                    "console",
                ],
                "level": ENV("DJANGO_LOG_LEVEL", default="DEBUG"),
                "propagate": True,
            },
        },
    }

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "backend_service.context_processors.environment_variables",
            ],
        },
    },
]

# Enabling ASGI by default, comment out and uncomment WSGI_APPLICATION to use WSGI
ASGI_APPLICATION = "backend_service.asgi.application"
# WSGI_APPLICATION = 'backend_service.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "HOST": POSTGRES_HOST,
        "NAME": POSTGRES_DB,
        "USER": POSTGRES_USER,
        "PASSWORD": POSTGRES_PASSWORD,
        "PORT": POSTGRES_PORT,
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
        "OPTIONS": {
            "min_length": 10,
        },
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
    {
        "NAME": "core_central_service.validators.PasswordCombinationValidator",
    },
]

# Uncomment the following line if you want to use custom authentication backend
# in case you are using stateless JWT authentication, and external authentication service
# Note: Apart from uncommenting the following line, you will also need to comment the
# default authentication classes in REST_FRAMEWORK settings, and uncomment the
# JWTStatelessUserAuthentication class in REST_FRAMEWORK settings, moreover, you will
# also need to uncomment the custom TOKEN_USER_CLASS in SIMPLE_JWT settings
# AUTHENTICATION_BACKENDS = ['utils.stateless.CustomAuthenticationBackend']

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework.authentication.BasicAuthentication",
        "rest_framework.authentication.SessionAuthentication",
        "rest_framework_simplejwt.authentication.JWTAuthentication",
        # Comment the above lines and uncomment the below line to use stateless JWT authentication
        # 'rest_framework_simplejwt.authentication.JWTStatelessUserAuthentication',
    ),
    "DEFAULT_PERMISSION_CLASSES": ("backend_service.permissions.IsAuthenticated",),
    "DEFAULT_PAGINATION_CLASS": "backend_service.pagination.PageNumberPagination",
    "PAGE_SIZE": 100,
    "DEFAULT_THROTTLE_CLASSES": [
        "rest_framework.throttling.ScopedRateThrottle",
    ],
    "DEFAULT_THROTTLE_RATES": {
        "standard": "500/minute",
        "auth": "5/minute",
    },
    "EXCEPTION_HANDLER": "backend_service.exceptions.exception_handler",
}

if ENVIRONMENT == "production":
    # This disables the 'browsable' api that can cause various production issues
    REST_FRAMEWORK["DEFAULT_RENDERER_CLASSES"] = (
        "rest_framework.renderers.JSONRenderer",
    )

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(hours=24),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=60),
    "UPDATE_LAST_LOGIN": True,
    # Comment the above line and uncomment the below line to use stateless JWT authentication
    # 'TOKEN_USER_CLASS': 'utils.stateless.CustomTokenUser',
}


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
STATIC_URL = "/static/"
STORAGES = {
    "default": {
        "BACKEND": "whitenoise.storage.CompressedStaticFilesStorage",
    },
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedStaticFilesStorage",
    },
}

# Extra places for collectstatic to find static files.
STATICFILES_DIRS = (os.path.join(BASE_DIR, "static"),)

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
