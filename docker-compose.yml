# Define a network for our services to communicate
networks:
  app_net:
    driver: bridge

# Define an anchor named 'backend-service' to avoid code repetition.
# This object will be merged in other services
x-backend-service:
  &backend-service
  build:
    context: .  # build the image from the current directory
    dockerfile: Dockerfile.dev  # use the development Dockerfile in the current directory
  environment:  # environment variables passed to the service
    DJANGO_SETTINGS_MODULE: backend_service.settings.local  # specify Django settings module
  env_file: .env  # Load environment variables from a file named .env

# Define all the services for this application
services:

  # Redis service
  redis:
    image: redis  # use the official Redis image
    expose:  # ports to expose within the internal network, not to the host machine
      - 6379
    healthcheck:  # healthcheck command for Redis service
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 5
    restart: always  # always restart this service if it stops
    networks:  # this service belongs to these networks
      - app_net

  # primary PostgreSQL database service
  db-master:
    image: postgres:latest  # use the official PostgreSQL image
    env_file: .env  # Load environment variables from a file named .env
    ports: # map the PostgreSQL port to a port on the host machine
      - '${PRIMARY_POSTGRES_PORT}:${POSTGRES_PORT}'
    volumes: # map the data directory in the container to a folder on the host machine
      - ./postgres-master-data:/var/lib/postgresql/data:delegate
      - ./db-master-entrypoint.sh:/docker-entrypoint-initdb.d/custom_entrypoint.sh
    entrypoint: [ "/docker-entrypoint-initdb.d/custom_entrypoint.sh" ]
    healthcheck: # healthcheck command for PostgreSQL service
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB" ]
      interval: 5s
      retries: 5
    restart: always  # always restart this service if it stops
    networks: # this service belongs to these networks
      - app_net

  # secondary PostgreSQL database service
#  db-slave:
#    image: postgres:16-alpine  # use the official PostgreSQL image
#    env_file: .env  # Load environment variables from a file named .env
#    ports: # map the PostgreSQL port to a port on the host machine
#      - '${SECONDARY_POSTGRES_PORT}:${POSTGRES_PORT}'
#    volumes: # map the data directory in the container to a folder on the host machine
#      - ./postgres-slave-data:/var/lib/postgresql/data:delegate
#      - ./db-slave-entrypoint.sh:/docker-entrypoint-initdb.d/custom_entrypoint.sh
#    entrypoint: ["/docker-entrypoint-initdb.d/custom_entrypoint.sh"]
#    healthcheck: # healthcheck command for PostgreSQL service
#      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
#      interval: 5s
#      retries: 5
#    restart: always  # always restart this service if it stops
#    networks: # this service belongs to these networks
#      - app_net
#    depends_on:
#      db-master:
#        condition: service_healthy  # only start this service if the db-master service is healthy

  # Celery worker service
  backend-worker:
    <<: *backend-service  # use the backend-service anchor to share configuration
    command: celery -A backend_service worker -l info -Q celery --concurrency=3  # run the Celery worker command
    volumes:  # map the application code to a directory in the container
      - .:/code:cached
    healthcheck:
      test: ["CMD", "celery", "-A", "backend_service", "inspect", "stats", "||", "exit 1"]
      interval: 5s
      timeout: 30s
      retries: 5
    depends_on:  # this service depends on these other services
      redis:
        condition: service_healthy  # only start this service if the redis service is healthy
      db-master:
        condition: service_healthy  # only start this service if the master db service is healthy
#      db-slave:
#        condition: service_healthy  # only start this service if the slave db service is healthy
    restart: always  # always restart this service if it stops
    networks:  # this service belongs to these networks
      - app_net

  # Django web server service
  backend-web:
    <<: *backend-service  # use the backend-service anchor to share configuration
    command: sh -c "./wait-for-postgres.sh gunicorn --bind 0.0.0.0:${APP_PORT} backend_service.wsgi:application --reload"
    # Here are available commands that you could use:
    # command to run using uvicorn:
    # sh -c "./wait-for-postgres.sh uvicorn --host 0.0.0.0 --port ${APP_PORT} backend_service.asgi:application --reload"
    # command to run using gunicorn:
    # sh -c "./wait-for-postgres.sh gunicorn --bind 0.0.0.0:${APP_PORT} backend_service.wsgi:application --reload"
    # command to run using Django's built-in server:
    # sh -c "./wait-for-postgres.sh python manage.py runserver 0.0.0.0:${APP_PORT}"
    volumes:  # map the application code to a directory in the container
      - .:/code:cached
    ports:  # map the Django server port to a port on the host machine
      - '${APP_PORT}:${APP_PORT}'
    healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:${APP_PORT}/readiness/"]
        interval: 5s
        timeout: 30s
        retries: 5
    depends_on:  # this service depends on these other services
      redis:
        condition: service_healthy  # only start this service if the redis service is healthy
      db-master:
        condition: service_healthy  # only start this service if the master db service is healthy
#      db-slave:
#        condition: service_healthy  # only start this service if the slave db service is healthy
      backend-worker:
        condition: service_healthy  # only start this service if the worker service is healthy
    restart: always  # always restart this service if it stops
    networks:  # this service belongs to these networks
      - app_net

# Declare volumes that can be used by services. Here, we're declaring a volume named 'db'.
volumes:
  db:
